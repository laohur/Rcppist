// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cosineSimilarity
double cosineSimilarity(const NumericVector& X, const NumericVector& Y);
RcppExport SEXP _Rcppist_cosineSimilarity(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(cosineSimilarity(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// csort
NumericVector csort(const NumericVector& X);
RcppExport SEXP _Rcppist_csort(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(csort(X));
    return rcpp_result_gen;
END_RCPP
}
// l2lise
NumericVector l2lise(const NumericVector& orig);
RcppExport SEXP _Rcppist_l2lise(SEXP origSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type orig(origSEXP);
    rcpp_result_gen = Rcpp::wrap(l2lise(orig));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _Rcppist_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_zlise
NumericVector rcpp_zlise(const NumericVector& X);
RcppExport SEXP _Rcppist_rcpp_zlise(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_zlise(X));
    return rcpp_result_gen;
END_RCPP
}
// relu
NumericVector relu(const NumericVector& X);
RcppExport SEXP _Rcppist_relu(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(relu(X));
    return rcpp_result_gen;
END_RCPP
}
// softmax
NumericVector softmax(const NumericVector& X);
RcppExport SEXP _Rcppist_softmax(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax(X));
    return rcpp_result_gen;
END_RCPP
}
// tanh
NumericVector tanh(const NumericVector& X);
RcppExport SEXP _Rcppist_tanh(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(tanh(X));
    return rcpp_result_gen;
END_RCPP
}
// zlise
NumericVector zlise(const NumericVector& orig);
RcppExport SEXP _Rcppist_zlise(SEXP origSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type orig(origSEXP);
    rcpp_result_gen = Rcpp::wrap(zlise(orig));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rcppist_cosineSimilarity", (DL_FUNC) &_Rcppist_cosineSimilarity, 2},
    {"_Rcppist_csort", (DL_FUNC) &_Rcppist_csort, 1},
    {"_Rcppist_l2lise", (DL_FUNC) &_Rcppist_l2lise, 1},
    {"_Rcppist_rcpp_hello_world", (DL_FUNC) &_Rcppist_rcpp_hello_world, 0},
    {"_Rcppist_rcpp_zlise", (DL_FUNC) &_Rcppist_rcpp_zlise, 1},
    {"_Rcppist_relu", (DL_FUNC) &_Rcppist_relu, 1},
    {"_Rcppist_softmax", (DL_FUNC) &_Rcppist_softmax, 1},
    {"_Rcppist_tanh", (DL_FUNC) &_Rcppist_tanh, 1},
    {"_Rcppist_zlise", (DL_FUNC) &_Rcppist_zlise, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rcppist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
